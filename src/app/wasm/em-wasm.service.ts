import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable()
export class EmWasmService {

  /**
   * Instantiates a JavaScript loader for WebAssembly, generated by Emscripten
   * 
   * @param url the URL to the generated JavaScript loader
   * @param moduleObj optional module options
   */
  instantiateJs(url: string, moduleObj?: EmModule): Observable<string> {
    const script = document.createElement('script');
    script.id = 'emscripten';
    script.async = true;
    document.body.appendChild(script);

    if (moduleObj) {
      window.Module = moduleObj;
    }

    return new Observable<string>(subscriber => {
      script.onload = () => {
        subscriber.next(script.innerHTML);
        subscriber.complete();
      };
      script.onerror = (ev: ErrorEvent) => subscriber.error(ev.error);
      script.src = url;
    });
  }

  /**
   * Exits the active Emscripten environment by calling exit()
   */
  exitActiveEnvironment() {
    if (!window.Module)
      throw Error('No active Emscripten environment found');

    const mod = window.Module;
    mod.noExitRuntime = false;
    try {
      mod.exit(0);
    }
    catch (err) {
      if (err.name !== 'ExitStatus')
        throw err;
    }

    window.Module = null;

    // Remove the associated loader
    const script = document.getElementById('emscripten');
    if (script) {
      document.body.removeChild(script);
    }
  }

  /**
   * Creates a danew data file in the memory
   * 
   * @param fileName the file name 
   * @param inputArray the file contents
   */
  createDataFile(fileName: string, inputArray: Uint8Array, canRead?: boolean, canWrite?: boolean) {
    try {
      FS.createDataFile('/', fileName, inputArray, canRead, canWrite);
    }
    catch (err) {
      if (err.code !== 'EEXIST')
        throw err;
    }
  }

  /**
   * Reads a file from the memory as a text
   * 
   * @param fileName the file name
   */
  readTextFile(fileName: string): string {
    return FS.readFile(fileName, { encoding: 'utf8' });
  }
}